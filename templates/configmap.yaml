apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "artemis.fullname" . }}
  labels:
{{ include "artemis.labels" . | indent 4 }}
data:
  broker.xml: |
    <?xml version="1.0" encoding="UTF-8" standalone="no"?>
    <configuration xmlns="urn:activemq" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:activemq /schema/artemis-configuration.xsd">
      <core xmlns="urn:activemq:core" xsi:schemaLocation="urn:activemq:core ">
        
        <xi:include href="connectors.xml"/>

        <cluster-user>{{ .Values.auth.clusterUser }}</cluster-user>
        <xi:include href="clustering.xml" />

        <xi:include href="broadcast.xml"/>
        <xi:include href="discovery.xml"/>

        <xi:include href="addresses.xml"/>
        <xi:include href="address-settings.xml" />

        {{- range $key, $value := .Values.core }}
        <{{ kebabcase $key }}>{{ $value }}</{{ kebabcase $key }}>
        {{- end }}
      </core>
    </configuration>

  broker-ha-live.xml: |
    <?xml version="1.0" encoding="UTF-8" standalone="no"?>
    <configuration xmlns="urn:activemq" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:activemq /schema/artemis-configuration.xsd">
      <core xmlns="urn:activemq:core" xsi:schemaLocation="urn:activemq:core ">
        
        <xi:include href="connectors.xml"/>

        <cluster-user>{{ .Values.auth.clusterUser }}</cluster-user>
        <xi:include href="clustering.xml" />

        <xi:include href="broadcast.xml"/>
        <xi:include href="discovery.xml"/>

        <xi:include href="addresses.xml"/>
        <xi:include href="address-settings.xml" />

        <xi:include href="ha-live.xml" />

        {{- range $key, $value := .Values.core }}
        <{{ kebabcase $key }}>{{ $value }}</{{ kebabcase $key }}>
        {{- end }}
      </core>
    </configuration>

  broker-ha-backup.xml: |
    <?xml version="1.0" encoding="UTF-8" standalone="no"?>
    <configuration xmlns="urn:activemq" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:activemq /schema/artemis-configuration.xsd">
      <core xmlns="urn:activemq:core" xsi:schemaLocation="urn:activemq:core ">
        
        <xi:include href="connectors.xml"/>

        <cluster-user>{{ .Values.auth.clusterUser }}</cluster-user>
        <xi:include href="clustering.xml" />

        <xi:include href="broadcast.xml"/>
        <xi:include href="discovery.xml"/>

        <xi:include href="addresses.xml"/>
        <xi:include href="address-settings.xml" />

        <xi:include href="ha-backup.xml" />

        {{- range $key, $value := .Values.core }}
        <{{ kebabcase $key }}>{{ $value }}</{{ kebabcase $key }}>
        {{- end }}
      </core>
    </configuration>
 
  connectors.xml: |
    <connectors xmlns="urn:activemq:core">
      <connector name="netty">tcp://0.0.0.0:61617</connector>
    </connectors>

  clustering.xml: |
    <cluster-connections xmlns="urn:activemq:core">
      <cluster-connection name={{ include "artemis.fullname" . }}>
        <address>{{ .Values.clustering.addresses | join "," }}</address>
        <connector-ref>netty</connector-ref>
        <discovery-group-ref>jgroups</discovery-group-ref>
        {{- range $key, $value := (omit .Values.clustering "address" "addresses" "connector-ref" "discovery-group-ref") }}
        <{{ kebabcase $key }}>{{ $value }}</{{ kebabcase $key }}>
        {{- end }}
      </cluster-connection>
    </cluster-connections>

  broadcast.xml: |
    <broadcast-groups xmlns="urn:activemq:core">
      <broadcast-group name="jgroups">
        <jgroups-file>jgroups.xml</jgroups-file>
        <jgroups-channel>activemq_broadcast_channel</jgroups-channel>
        <broadcast-period>2000</broadcast-period>
        <connector-ref>netty</connector-ref>
      </broadcast-group>
    </broadcast-groups>

  discovery.xml: |
    <discovery-groups  xmlns="urn:activemq:core" >
      <discovery-group name="jgroups">
          <jgroups-file>jgroups.xml</jgroups-file>
          <jgroups-channel>activemq_broadcast_channel</jgroups-channel>
          <refresh-timeout>10000</refresh-timeout>
      </discovery-group>
    </discovery-groups>

  jgroups.xml: |
    <TCP 
      bind_port="7800"
      thread_pool.min_threads="{{ .Values.replicaCount }}"
    />
  
    <org.jgroups.protocols.kubernetes.KUBE_PING
      port_range="1"
      namespace="{{ .Release.Namespace }}"
      labels="app.kubernetes.io/instance={{ .Release.Name }},app.kubernetes.io/name={{ include "artemis.name" . }}"
    />

  addresses.xml: |
    <addresses xmlns="urn:activemq:core">
    {{- range .Values.addresses }}
      <address name="{{ required "name is mandatory for each address" .name }}">
      {{- if eq "queue" (default "queue" .type) }}
        <anycast>
        {{- if .queues }}
            {{- range .queues }}
              <queue name="{{ . }}" />
            {{- end }}
        {{- else }}
            <queue name="{{ .name }}" />
        {{- end }}
        </anycast>
      {{- else if eq "topic" .type }}
        <multicast />  
      {{- else }}
        {{- fail "invald address type. Can only be 'queue' or 'topic'"}}
      {{- end }}
      </address>
    {{- end }}
    </addresses>

  address-settings.xml: |
    <address-settings xmlns="urn:activemq:core">
    {{- range .Values.addressSettings }}
       <address-setting match="{{ required "match is mandatory for each addressSetting" .match }}">
       {{- range $key, $value := .settings }}
        <{{ kebabcase $key }}>{{ $value }}</{{ kebabcase $key }}>
       {{- end }}
       </address-setting>
    {{- end }}
    </address-settings>

  ha-live.xml: |
    <ha-policy xmlns="urn:activemq:core">
      <replication>
          <master>
            <check-for-live-server>{{ .Values.ha.failBack }}</check-for-live-server>
            {{- range $key, $value := (omit .Values.ha.live "check-for-live-server" "checkForLiveServer") }}
            <{{ kebabcase $key }}>{{ $value }}</{{ kebabcase $key }}>
            {{- end }}
          </master>
      </replication>
    </ha-policy>

  ha-backup.xml: |
    <ha-policy xmlns="urn:activemq:core">
      <replication>
          <slave>
            <allow-failback>{{ .Values.ha.failBack }}</allow-failback>
            {{- range $key, $value := (omit .Values.ha.backup "allow-failback" "allowFailback") }}
            <{{ kebabcase $key }}>{{ $value }}</{{ kebabcase $key }}>
            {{- end }}
          </slave>
      </replication>
    </ha-policy>

